import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class SWEA4014 {
	public static int T,N,X, map[][];
	
	/**
	 * 
	 * 
	 * 
	 * @return
	 */
	public static boolean isPosiblePath(ArrayList<Integer> currlist) {
		int floatGround = 1;
		for(int i =0 ; i < N-1; i++) {
			int curr = currlist.get(i);
			int next = currlist.get(i+1);
			if (curr == next) {
				floatGround++;
			}else if(curr - next == 1) {
				if (floatGround >= X) {
					return true;
				}
				floatGround = 1;
			}else if (curr - next == -1) {
				if (floatGround >= X) {
					return true;
				}
				floatGround = 1;	
			}else {
				floatGround = 1;
			}	
		}
		return false;
	}
	
	public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        T = Integer.parseInt(br.readLine());
        for(int tc = 1; tc<=T;tc++) {
        	StringTokenizer st = new StringTokenizer(br.readLine());
        	N = Integer.parseInt(st.nextToken());
        	X = Integer.parseInt(st.nextToken());
        	
        	map = new int[N][N];
        	for(int y= 0; y< N; y++) {
            	st = new StringTokenizer(br.readLine());
        		for(int x= 0; x< N; x++) {
        			map[y][x] = Integer.parseInt(st.nextToken());
        		}
        	}
        	
        	
        	ArrayList<Integer>Arrays[] = new ArrayList[N * N + 1];
        	int index = 0;
        	for(int y = 0 ; y < N ; y++) {
        		ArrayList <Integer> row = new ArrayList();
        		ArrayList <Integer> col = new ArrayList();
        		for(int x= 0; x < N; x++) {
        			row.add(map[y][x]);
        			col.add(map[x][y]);
        		}
        		Arrays[index++] = row;
        		Arrays[index++] = col;
        	}
        	
        	int Solution = 0;
        	for(ArrayList<Integer> currlist: Arrays) {
        		if(currlist != null) {
        			if (isPosiblePath(currlist))
        				Solution++;
	        	}
        	}
	        System.out.println("#"+tc+" "+ Solution);
        	
        }   
	}
}
