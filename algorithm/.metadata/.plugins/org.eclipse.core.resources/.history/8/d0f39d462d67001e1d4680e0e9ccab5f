import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class SWEA7465 {
	
	static int TC;
	static int N,M;
	static boolean Visited[];
	
	public static boolean bfs(LinkedList<Integer>[] adjList,int startpoint) {
	
		if (Visited[startpoint])
			return false;
		
		Deque <Integer> queue = new ArrayDeque();
		queue.add(startpoint);
		while(!queue.isEmpty()) {
			int currpoint = queue.poll();
			
			for(int to :adjList[currpoint]) {
				Visited[to] = true;
				queue.add(to);
			}
		}
		return true;
	}
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		TC = Integer.parseInt(br.readLine());
		for(int tc = 1; tc <= TC; tc++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());
			Visited = new boolean[M];
			
			LinkedList<Integer>[] adjList = new LinkedList[N + 1];
			for(int i =0; i < M; i++) {
				st = new StringTokenizer(br.readLine());
				int from = Integer.parseInt(st.nextToken());
				int to = Integer.parseInt(st.nextToken());
				adjList[from].add(to);
			}
			
			int cnt = 0;
			for(int i =0; i < M; i++) {
				if (bfs(adjList,i)) {
					cnt++;
				}
			}
			System.out.println("#"+tc +" "+ cnt);
		}		
	}
}
